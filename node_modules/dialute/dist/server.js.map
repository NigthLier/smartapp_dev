{"version":3,"file":"server.js","sourceRoot":"","sources":["../src/server.ts"],"names":[],"mappings":";;;;AAAA,aAAa;AACb,mCAAoC;AACpC,qCAAkD;AAClD,0DAA0B;AAE1B,MAAa,OAAO;IAKlB,YAAY,EAAE,EAAE,EAAE,IAAI,GAAG,MAAM,EAAuC;QACpE,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;QACb,IAAI,CAAC,GAAG,GAAG,OAAO,EAAE,CAAC;QACrB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QAEjB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;YAC9B,IAAA,gBAAO,EAAC,GAAG,eAAK,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,eAAK,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAC/D,IAAI,EAAE,CAAC;QACT,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;QAC7B,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAO,OAAO,EAAE,QAAQ,EAAE,EAAE;YAC3D,MAAM,IAAI,GAAG,CAAC,MAAM,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;YACxD,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACtB,CAAC,CAAA,CAAC,CAAC;IACL,CAAC;IAED,MAAM,CAAC,cAAc,CAAC,UAA6B;QACjD,MAAM,EAAE,GAAG,IAAI,sBAAa,CAAC,UAAU,CAAC,CAAC;QACzC,MAAM,IAAI,GAAG,MAAM,CAAC;QACpB,OAAO,IAAI,OAAO,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;IACnC,CAAC;IAED,QAAQ,CAAC,IAAY;QACnB,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;QACnC,OAAO,IAAI,CAAC;IACd,CAAC;IAED,KAAK;QACH,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,GAAG,EAAE,CAC9B,IAAA,gBAAO,EAAC,eAAK,CAAC,IAAI,CAAC,oCAAoC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC,CACtE,CAAC;IACJ,CAAC;CACF;AArCD,0BAqCC","sourcesContent":["// @ts-ignore\nimport express = require('express');\nimport { dateLog, DialogManager } from './dialog';\nimport chalk from 'chalk';\n\nexport class Dialute {\n  dm: DialogManager;\n  app: express.Express;\n  port: string;\n\n  constructor({ dm, port = '8000' }: { dm: DialogManager; port: string }) {\n    this.dm = dm;\n    this.app = express();\n    this.port = port;\n\n    this.app.use((req, res, next) => {\n      dateLog(`${chalk.green(req.method)}: ${chalk.cyan(req.path)}`);\n      next();\n    });\n    this.app.use(express.json());\n    this.app.post('/app-connector/', async (request, response) => {\n      const body = (await this.dm.process(request.body)).body;\n      response.send(body);\n    });\n  }\n\n  static fromEntrypoint(entrypoint: GeneratorFunction): Dialute {\n    const dm = new DialogManager(entrypoint);\n    const port = '8000';\n    return new Dialute({ dm, port });\n  }\n\n  shareApp(path: string) {\n    this.app.use(express.static(path));\n    return this;\n  }\n\n  start() {\n    this.app.listen(this.port, () =>\n      dateLog(chalk.blue(`Start server on http://localhost:${this.port}/`))\n    );\n  }\n}\n"]}