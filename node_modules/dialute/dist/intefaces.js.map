{"version":3,"file":"intefaces.js","sourceRoot":"","sources":["../src/intefaces.ts"],"names":[],"mappings":"","sourcesContent":["export interface ServerAction {\n  app_info: AppInfo;\n  action_id: string;\n  parameters: object;\n\n  [x: string | number | symbol]: unknown;\n}\n\nexport interface AppInfo {\n  projectId: string;\n  applicationId: string;\n  appversionId: string;\n  frontendEndpoint: string;\n  frontendType: AppType;\n  systemName: string;\n  frontendStateId: string;\n}\n\nexport interface Character {\n  id: 'sber' | 'athena' | 'joy';\n  name: 'Сбер' | 'Афина' | 'Джой';\n  gender: 'male' | 'female';\n  appeal: 'official' | 'no_official';\n}\n\nexport type MessageType =\n  | 'MESSAGE_TO_SKILL'\n  | 'SERVER_ACTION'\n  | 'RUN_APP'\n  | 'CLOSE_APP';\n\nexport interface UUID {\n  userId: string;\n  sub: string;\n  userChannel: string;\n}\n\nexport interface Time {\n  timestamp: number;\n  timezone_id: string;\n  timezone_offset_sec: number;\n}\n\nexport interface Features {\n  screen: boolean; // is enabled\n  int_login: boolean; // is enabled\n}\n\nexport type AppType = 'DIALOG' | 'WEB_APP' | 'APK' | 'CHAT_APP';\n\nexport interface Capabilities {\n  screen: { available: boolean };\n  mic: { available: boolean };\n  speak: { available: boolean };\n}\n\nexport interface Device {\n  platformType?: 'ANDROID' | 'IOS';\n  platformVersion?: string;\n  surface: 'SBERBOX' | 'COMPANION' | 'STARGATE';\n  surfaceVersion?: string;\n  deviceId?: string;\n  features?: { appTypes: AppType[] };\n  capabilities: Capabilities;\n  additionalInfo?: object;\n}\n\nexport interface Strategies {\n  happy_birthday: boolean;\n  last_call: string;\n  is_alice?: boolean; // If biometry detects Yandex Alice\n}\n\nexport type CensorClasses = 'politicians' | 'obscene' | 'model_response';\nexport type SentimentClasses = 'negative' | 'positive' | 'neutral';\n\nexport interface Annotations {\n  censor_data: { classes: CensorClasses[]; probas: number[] };\n  text_sentiment: { classes: SentimentClasses; probas: number[] };\n  asr_sentiment: { classes: SentimentClasses; probas: number[] };\n}\n\nexport interface Message {\n  original_text: string;\n  asr_normalized_message: string;\n  normalized_text: string;\n  entities: any;\n  tokenized_elements_list: any[];\n}\n\nexport interface MESSAGE_TO_SKILL {\n  app_info: AppInfo;\n  intent: string;\n  original_intent: string;\n  intent_meta: object; // They will add this later\n  meta: { time: Time; features?: Features };\n  projectName?: string;\n  selected_item: object; // TODO if necessary make a type\n  device: Device;\n  new_session?: boolean;\n  character: Character;\n  strategies?: Strategies;\n  annotations?: Annotations;\n  message: Message;\n}\n\nexport interface SERVER_ACTION {\n  device: Device;\n  app_info: AppInfo;\n  projectName?: string;\n  character: Character;\n  strategies?: Strategies;\n  server_action: ServerAction;\n}\n\nexport interface RUN_APP {\n  device: Device;\n  app_info: AppInfo;\n  projectName: string;\n  intent: string;\n  character: Character;\n  strategies?: Strategies;\n  server_action: ServerAction;\n}\n\nexport interface CLOSE_APP {\n  app_info: AppInfo;\n  intent: string;\n  original_intent: string;\n  intent_meta: object;\n  projectName?: string;\n  selected_item: object;\n  device: Device;\n  new_session?: boolean;\n  character: Character;\n  strategies?: Strategies;\n  annotations?: Annotations;\n  message: Message;\n}\n\nexport type Payload = MESSAGE_TO_SKILL | SERVER_ACTION | RUN_APP | CLOSE_APP;\n\nexport interface FullRequest {\n  messageName: MessageType;\n  sessionId: string;\n  messageId: number;\n  uuid: UUID;\n  payload: Payload;\n}\n"]}