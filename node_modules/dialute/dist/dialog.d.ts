import { SberRequest, SberResponse } from './api';
export declare type ScriptStep = string | SberResponse | Generator | GeneratorFunction;
export declare function dateLog(msg: string): void;
declare type Callback = (s: Session) => Promise<any>;
export declare enum Event {
    CreateSession = "CREATE_SESSION",
    DeleteSession = "DELETE_SESSION"
}
export declare class DialogManager {
    start: any;
    sessions: any;
    hooks: {
        [event in Event]: Callback[];
    };
    deleteSessionAfter: number;
    deleteEachTime: number;
    constructor(start: GeneratorFunction, optional?: {
        deleteSessionAfter: number;
        deleteEachTime: number;
    });
    process(request: any): Promise<SberResponse>;
    newHook(event: Event, callback: Callback): void;
    deleteSessions(): Promise<void>;
}
export declare class Session {
    start: any;
    script: Generator<SberRequest, string | SberResponse | Function>;
    ctx: any;
    request: SberRequest;
    lastActive: number;
    constructor(start: any, request: SberRequest);
    step(): ScriptStep;
}
export {};
